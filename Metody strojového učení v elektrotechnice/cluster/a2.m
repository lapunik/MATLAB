func = @(x) (sin(pi.*x))./((x.^2)+1);           % funkce pro nagenerování dat
from = 0;                                       % rozsah pro od ...
to = 2;                                         % ... do pro nagenerování dat
N =  200;                                       % počet vzorků
x = from:((to-from)/(N-1)):to;                  % vzorkovací čas
% y = awgn(func(x),27);                         % generátor naměřených dat skrze funkci pro nagenerování dat (prostě přidá do funkce šum)
y = [0.0298656896269880,0.109766267733079,0.0668915048063826,0.106242368512189,0.0553855266575713,0.136255455637044,0.120915002380381,0.211532557167483,0.213489888308874,0.220543792656902,0.307212583039145,0.298708856008389,0.421212107321877,0.491826887234687,0.426292710191314,0.458571977069784,0.384290634095908,0.563732226463622,0.493302664205136,0.562160692062685,0.558419898406971,0.604620757541701,0.606402946684143,0.636187476998177,0.601985460780460,0.673665174689248,0.618516681545710,0.696434849592990,0.724733587034512,0.718429769108826,0.758693316765038,0.795930406851633,0.696425741317914,0.712815242840448,0.759303134503403,0.814245396954751,0.817659350900348,0.792416591294165,0.839251021914612,0.910228739718005,0.772202665540853,0.784641849579925,0.741741604757703,0.829532046291192,0.858190115883340,0.804278778533424,0.866827425547599,0.804154073156698,0.820861170004116,0.849879449472163,0.824627400265009,0.805425233345341,0.847206331064188,0.734052727508256,0.744772424765463,0.768693613504914,0.728752543113144,0.708086838015578,0.753385276376785,0.685854154684301,0.712915116748795,0.673261125364717,0.647642002510720,0.672691223657397,0.649956893892889,0.533037528908273,0.589887098044540,0.540299731326985,0.576568450357544,0.522284203130816,0.536160871382652,0.574976517753167,0.576937787500597,0.518316180347972,0.392792018029058,0.511079788119527,0.474789071633636,0.419198359388005,0.497463520649676,0.349263744982504,0.430888742054047,0.282238661753092,0.294821835554650,0.241118189707444,0.299603183484017,0.271776960288092,0.207570333680997,0.155061732956790,0.0787905811143228,0.138220309686523,0.0984341748694308,0.173921178038289,0.174598961130783,0.0193361376500105,0.0132464698355674,0.0526828751431539,0.0994315057849897,0.0964076328063964,0.0897146608901084,-0.00977322840781223,-0.0372280816082464,-0.0694935231041728,-0.0138389647144669,-0.0190738712887916,-0.136021570658266,-0.0879943717310612,-0.119189119282237,-0.0818915883885270,-0.0706438446704520,-0.0807215505381541,-0.124694977547944,-0.176943726597961,-0.190943184094421,-0.233022527679767,-0.139106858025517,-0.241380830938702,-0.297957996222008,-0.257218204476684,-0.164345477820191,-0.226333477880537,-0.262054924047882,-0.244172280616659,-0.243153126693265,-0.247729390155447,-0.281715240912670,-0.177576136843003,-0.237889992730323,-0.400931946160603,-0.337512333743319,-0.300784472489889,-0.281042889141176,-0.319491196933704,-0.311948518475171,-0.327152968111840,-0.373795718490723,-0.221840860143418,-0.327339383609387,-0.215978132858970,-0.360457966431711,-0.332702789734994,-0.379851195399521,-0.359436294837872,-0.280420431144353,-0.286120919679368,-0.357831133770876,-0.310513743282909,-0.335153944756948,-0.276439267956310,-0.345409076302786,-0.238903425339107,-0.374726896607612,-0.289299187537738,-0.366423237018793,-0.327555052782864,-0.339247609602293,-0.217846160871059,-0.289891484989649,-0.263464583889273,-0.337605176873605,-0.311062704461895,-0.247442162385605,-0.262182764776867,-0.222503426343881,-0.194598706332143,-0.281469468969149,-0.277724038535006,-0.207831776401144,-0.227304974536567,-0.214915022340555,-0.248518723519916,-0.244701134849419,-0.175644036652768,-0.119098158896320,-0.197372963473924,-0.125431787453975,-0.106724458181618,-0.112944304114881,-0.0859684684031971,-0.130515732838651,-0.211454805018047,-0.168930413626429,-0.131807703058645,-0.182522134726495,-0.133843193263616,-0.0462579712271313,-0.130841728587720,-0.0797160375534842,-0.0690494826200434,0.00794482491482185,-0.0786339318703164,-0.0315113031797069,-0.108347157957052,-0.0855909002450379,-0.0249546523631807,-0.00932057617189958,-0.0471113206743972,-0.00710797105951257,-0.0428761768992976,0.0192860104851071,-0.0313727140496005];

alpha = 10e-3;   % míra učení 
tau = 1e-1;     % maximální možná chyba pro ukončení výpočtu

syms x_sym;

number_of_coefficients = 9;
syms w_sym [1,number_of_coefficients]
syms b_sym [1,number_of_coefficients]

syms y_sym_1 [3,1]
y_sym_1(1) = sym(w_sym(1) .* x_sym + b_sym(1));
y_sym_1(2) = sym(sin(w_sym(2) .* x_sym + b_sym(2)));
y_sym_1(3) = sym((w_sym(3) .* x_sym).*(b_sym(3) .* x_sym));

syms x1_sym;
syms x2_sym;
syms sym_w1;
syms sym_b1;
syms sym_w2;
syms sym_b2;


yd = sym(((sym_w1 .* x1_sym)+sym_b1)./((sym_w2 .* x2_sym)+sym_b2));

syms y_sym1 [1,9]

for i = 1:3
    for j = 1:3
        
        counter = ((i-1)*3)+j;
       
        y_sym1(counter) = subs(yd,sym_w1,w_sym(i+3));
        y_sym1(counter) = subs(y_sym1(counter),sym_b1,b_sym(i+3));
        y_sym1(counter) = subs(y_sym1(counter),sym_w2,w_sym(j+6));
        y_sym1(counter) = subs(y_sym1(counter),sym_b2,b_sym(j+6));
        
        y_sym1(counter) = subs(y_sym1(counter),x1_sym,y_sym_1(i));
        y_sym1(counter) = subs(y_sym1(counter),x2_sym,y_sym_1(j));
        
        
    end
end

y_sym = sum(y_sym1); 

model = subs(y_sym,x_sym,x);
epsilon = 10e-8;
beta1 = 0.9;
beta2 = 0.999;

counter = 1;

% % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % %
range = -2:0.05:-1;
% % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 

for j = range
   
    lambda = (0.1^-j); %     lambda = (0.1^-0.5);
    lasso = lambda.*(sum(abs([w_sym b_sym])));
    E_sym = sum(((y-model).^2) + lasso); %     E_sym = sum(((y-model).^2));
    
    grad_E_sym = gradient(E_sym,[w_sym,b_sym]);
    
    m = 0;
    v = 0;

    w = [0 3.2 1.1 -0.2 1 0 0.14 0.09 1.2]';  % w = (4.*rand(number_of_coefficients,1)-2); % náhodné koeficienty v rozmezí -2 až 2... %     w = (ones(number_of_coefficients,1));
    b = [-0.2 0.3 0.94 0.147 -0.0001 0 1e78 9999 1.08]';
    
    koef = [w;b];
    iter = 500;
    
    for i = 1:iter 
   
        grad_E = double(subs(grad_E_sym,[w_sym b_sym],koef'));
        
        m = beta1.*m+(1-beta1).*grad_E;
        v = beta2.*v+(1-beta2).*grad_E.^2;
 
        mm = m./(1-beta1^i);
        vv = v./(1-beta2^i);
       
        if (abs(max(grad_E)) < tau)
            iter = i;
            break;
        end

        koef = koef - ((alpha.*mm)./(sqrt(vv)+epsilon));
               
    end
    
    KOEF(:,counter) = koef;

    counter = counter + 1; 
end

save('results.mat','KOEF','range');